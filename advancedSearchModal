import React, { useEffect, useState } from "react";

import CloseIcon from "@mui/icons-material/Close";
import {
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  TextField,
  Button,
  Box,
  CircularProgress,
  MenuItem,
  Checkbox,
  ListItemText,
  Grid,
  Select,
  InputLabel,
  OutlinedInput,
} from "@mui/material";
// import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
// import { DatePicker } from "@mui/x-date-pickers/DatePicker";
// import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
// import { format } from "date-fns";
import { Field, Form, Formik } from "formik";
import * as Yup from "yup";
import { Key } from "@mui/icons-material";

// import constant from "../../utility/constant";

const AdvanceSearchModal = ({
  open,
  openHandler,
  formInitialValues,
  setFiltersApplied,
  submitClickHandler,
  handleFilterReset,
}) => {
  const IS_STATUS_LIST = [
    { key: "New", value: "New" },
    { key: "InProgress", value: "InProgress" },
    { key: "Closed", value: "Closed" },
  ];

  const validationSchema = Yup.object({
    traceId: Yup.string().nullable(true),
    document_coming_via: Yup.string().nullable(true),
    tenant_request_id: Yup.string().nullable(true),
    claim_number: Yup.string().nullable(true),
    claim_inward_number: Yup.string().nullable(true),
    policy_number: Yup.string().nullable(true),
    tenant_id: Yup.string().nullable(true),
    vendor_id: Yup.string().nullable(true),
    request_type: Yup.string().nullable(true),
    status: Yup.string().nullable(true),
    fromDate: Yup.date()
      .when("toDate", {
        is: (value) => {
          if (value) {
            return true;
          }
          return false;
        },
        then: Yup.date().max(
          Yup.ref("toDate"),
          "From date should be earlier than To date"
        ),
      })
      .nullable(true),
    toDate: Yup.date().max(new Date()).nullable(true),
  });

  return (
    <Dialog open={open} onClose={openHandler}>
      <DialogTitle
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
        }}
      >
        <>Advanced Filters</>
        <CloseIcon
          onClick={() => openHandler()}
          color="primary"
          sx={{
            height: "100%",
            cursor: "pointer",
          }}
        />
      </DialogTitle>
      <DialogContent sx={{ position: "relative" }}>
        <Formik
          initialValues={formInitialValues}
          enableReinitialize={true}
          validationSchema={validationSchema}
          onSubmit={(values, actions) => {
            submitClickHandler(values);
          }}
        >
          {(props) => (
            <Form>
              <Grid container spacing={2} xs={12} sx={{ mb: 1, p: 1 }}>
                {/* traceId */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="traceId">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Trace Id"
                          fullWidth="true"
                          name="traceId"
                          error={touched.traceId && errors.traceId}
                          helperText={
                            touched.traceId &&
                            errors.traceId && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.traceId}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* document_coming_via */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="document_coming_via">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Document Coming Via"
                          fullWidth="true"
                          name="document_coming_via"
                          error={
                            touched.document_coming_via &&
                            errors.document_coming_via
                          }
                          helperText={
                            touched.document_coming_via &&
                            errors.document_coming_via && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.document_coming_via}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* tenant_request_id */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="tenant_request_id">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Request Number"
                          fullWidth="true"
                          name="tenant_request_id"
                          error={
                            touched.tenant_request_id &&
                            errors.tenant_request_id
                          }
                          helperText={
                            touched.tenant_request_id &&
                            errors.tenant_request_id && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.tenant_request_id}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* claim_number */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="claim_number">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Claim Number"
                          fullWidth="true"
                          name="claim_number"
                          error={touched.claim_number && errors.claim_number}
                          helperText={
                            touched.claim_number &&
                            errors.claim_number && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.claim_number}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* claim_inward_number */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="claim_inward_number">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Claim Inward Number"
                          fullWidth="true"
                          name="claim_inward_number"
                          error={
                            touched.claim_inward_number &&
                            errors.claim_inward_number
                          }
                          helperText={
                            touched.claim_inward_number &&
                            errors.claim_inward_number && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.claim_inward_number}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* policy_number */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="policy_number">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Policy Number"
                          fullWidth="true"
                          name="policy_number"
                          error={touched.policy_number && errors.policy_number}
                          helperText={
                            touched.policy_number &&
                            errors.policy_number && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.policy_number}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* tenant_id */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="tenant_id">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Tenant Id"
                          fullWidth="true"
                          name="tenant_id"
                          error={touched.tenant_id && errors.tenant_id}
                          helperText={
                            touched.tenant_id &&
                            errors.tenant_id && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.tenant_id}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* vendor_id */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="vendor_id">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Vendor Id"
                          fullWidth="true"
                          name="vendor_id"
                          error={touched.vendor_id && errors.vendor_id}
                          helperText={
                            touched.vendor_id &&
                            errors.vendor_id && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.vendor_id}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* product_endpoint */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="product_endpoint">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Product Endpoint"
                          fullWidth="true"
                          name="product_endpoint"
                          error={
                            touched.product_endpoint && errors.product_endpoint
                          }
                          helperText={
                            touched.product_endpoint &&
                            errors.product_endpoint && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.product_endpoint}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* no_of_documents */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="no_of_documents">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="No Of Documents"
                          fullWidth="true"
                          name="no_of_documents"
                          error={
                            touched.no_of_documents && errors.no_of_documents
                          }
                          helperText={
                            touched.no_of_documents &&
                            errors.no_of_documents && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.no_of_documents}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* status */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="status">
                      {({ field, form: { touched, errors }, meta }) => {
                        return (
                          <>
                            <TextField
                              {...field}
                              value={field.value}
                              variant="outlined"
                              size="small"
                              label="Status"
                              fullWidth
                              error={touched.status && errors.status}
                              select
                              // SelectProps={{
                              //   multiple: true,
                              //   renderValue: (selected) => selected.join(", "),
                              // }}
                              // type="number"
                            >
                              {IS_STATUS_LIST?.map((item, index) => (
                                <MenuItem key={item.key} value={item.value}>
                                  {item.value}
                                </MenuItem>
                              ))}
                            </TextField>
                          </>
                        );
                      }}
                    </Field>
                  </Grid>
                </Grid>
                {/* request_type */}
                <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="request_type">
                      {({ field, form: { touched, errors }, meta }) => (
                        <TextField
                          {...field}
                          variant="outlined"
                          size="small"
                          label="Request Type"
                          fullWidth="true"
                          name="request_type"
                          error={touched.request_type && errors.request_type}
                          helperText={
                            touched.request_type &&
                            errors.request_type && (
                              <Box sx={{ color: "red", ml: "-10px" }}>
                                {errors.request_type}
                              </Box>
                            )
                          }
                        ></TextField>
                      )}
                    </Field>
                  </Grid>
                </Grid>
                {/* fromDate */}
                {/* <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="fromDate">
                      {({ field, form: { touched, errors }, meta }) => (
                        <LocalizationProvider dateAdapter={AdapterDayjs}>
                          <DatePicker
                            {...field}
                            label="From"
                            inputFormat="DD-MMM-YYYY"
                            disableFuture
                            value={props.values.fromDate}
                            onChange={(value) => {
                              props.setFieldValue("fromDate", new Date(value));
                            }}
                            onBlur={field.onBlur}
                            renderInput={(params) => {
                              return (
                                <TextField
                                  {...params}
                                  name={field.name}
                                  onBlur={props.handleBlur}
                                  error={Boolean(
                                    touched.fromDate && errors.fromDate
                                  )}
                                  size="small"
                                  helperText={
                                    touched.fromDate &&
                                    errors.fromDate && (
                                      <Box sx={{ color: "red", ml: "-10px" }}>
                                        {errors.fromDate}
                                      </Box>
                                    )
                                  }
                                  inputProps={{
                                    ...params.inputProps,
                                    readOnly: true,
                                    size: "small",
                                  }}
                                  // sx={{ mr: "20px" }}
                                />
                              );
                            }}
                          />
                        </LocalizationProvider>
                      )}
                    </Field>
                  </Grid>
                </Grid> */}
                {/* toDate */}
                {/* <Grid item xs={12} md={6}>
                  <Grid xs={12}>
                    <Field name="toDate">
                      {({ field, form: { touched, errors }, meta }) => (
                        <LocalizationProvider dateAdapter={AdapterDayjs}>
                          <DatePicker
                            label="To"
                            disableFuture
                            value={props.values.toDate}
                            onChange={(value) => {
                              props.setFieldValue("toDate", new Date(value));
                              // props.setFieldTouched("toDate");
                            }}
                            inputFormat="DD-MMM-YYYY"
                            renderInput={(params) => {
                              return (
                                <TextField
                                  {...params}
                                  name={field.name}
                                  onBlur={props.handleBlur}
                                  size="small"
                                  error={Boolean(
                                    touched.toDate && errors.toDate
                                  )}
                                  helperText={
                                    touched.toDate &&
                                    errors.toDate && (
                                      <Box sx={{ color: "red", ml: "-10px" }}>
                                        {errors.toDate}
                                      </Box>
                                    )
                                  }
                                  inputProps={{
                                    ...params.inputProps,
                                    readOnly: true,
                                  }}
                                />
                              );
                            }}
                          />
                        </LocalizationProvider>
                      )}
                    </Field>
                  </Grid>
                </Grid> */}
              </Grid>

              <DialogActions>
                <Button onClick={handleFilterReset}>Reset</Button>
                <Button
                  type="submit"
                  onClick={() => {
                    const filtersApplied = Object.values(props.values).some(
                      (value) => value !== ""
                    );
                    setFiltersApplied(filtersApplied);
                  }}
                >
                  Apply
                </Button>
              </DialogActions>
            </Form>
          )}
        </Formik>
      </DialogContent>
    </Dialog>
  );
};

export default AdvanceSearchModal;
